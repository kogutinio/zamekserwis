import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from dotenv import load_dotenv
from database import Database

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = os.getenv('GROUP_ID')
DISPATCHER_IDS = [int(x) for x in os.getenv('DISPATCHER_IDS').split(',')]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ADDRESS, CONTACTS, TIME = range(3)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")
    ]])

def accept_keyboard(order_id):
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_{order_id}")
    ]])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîß ZamekSerwis - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏",
        reply_markup=main_keyboard()
    )

async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    if user_id not in DISPATCHER_IDS:
        await update.callback_query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤!", show_alert=True)
        return ConversationHandler.END
        
    await update.callback_query.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:")
    return CONTACTS

async def get_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contacts'] = update.message.text
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2025 14:30):")
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = context.user_data['address']
    contacts = context.user_data['contacts']
    time = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    order_id = await db.add_order(address, contacts, time)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    await context.bot.send_message(
        chat_id=GROUP_ID,
        text=f"üö® –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}\n\n"
             f"üìç –ê–¥—Ä–µ—Å: {address}\n"
             f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {contacts}\n"
             f"‚è∞ –í—Ä–µ–º—è: {time}",
        reply_markup=accept_keyboard(order_id)
    )
    
    await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!")
    return ConversationHandler.END

async def accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_id = int(query.data.split('_')[1])
    worker_id = query.from_user.id
    worker_name = query.from_user.full_name
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.assign_order(order_id, worker_id, worker_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=f"{query.message.text}\n\n"
             f"‚úÖ –ü—Ä–∏–Ω—è–ª: {worker_name}",
        reply_markup=None
    )
    
    await query.answer(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id}!")

async def init_db():
    await db.connect()

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    app.run_polling(init_db(), close_loop=False)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(create_order, pattern="create_order")],
        states={
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contacts)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)]
        },
        fallbacks=[]
    )
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(accept_order, pattern=r"accept_\d+"))
    
    app.run_polling()

if __name__ == "__main__":
    main()
